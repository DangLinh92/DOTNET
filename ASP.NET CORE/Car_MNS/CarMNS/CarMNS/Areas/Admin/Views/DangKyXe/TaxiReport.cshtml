@using Microsoft.AspNetCore.Authorization
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@inject IAuthorizationService AuthorizationService
@{
    ViewData["Title"] = "TaxiReport";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        #gridContainer td {
            vertical-align: middle;
        }

        #gridContainer .chart-cell {
            overflow: visible;
        }

        #gridContainer .plan-value {
            display: inline-block;
            display: block;
        }

        #gridContainer .actual-value {
            position: relative;
            display: block;
            border-top: 1px solid #004E89;
        }

        #gridContainer .yeallow {
            color: #333;
            background-color: #FFD3A3;
        }

        #gridContainer .overRed {
            color: white;
            background-color: #E74646;
        }
    </style>
}

@section Scripts
    {
    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>

    <script>

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('Register car');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'TaxiReport.xlsx');
                });
            });
            e.cancel = true;
        }

        function getDateBoxValueFromYear() {
            let time = $("#begindate-date").dxDateBox("option", "text");
            return time.substring(0, 4);
        }


        function getDateBoxValueFrom() {
            return $("#begindate-date").dxDateBox("option", "text");
        }

        function getDateBoxValueTo() {
            return $("#todate-date").dxDateBox("option", "text");
        }

        function getSelectBoxValue() {
            return $("#slBophan").dxSelectBox("option", "value");
        }

        function selectBox_valueChanged(data) {
            $("#gridContainer").dxDataGrid("refresh");
        }

        function refreshGrid() {
            $("#gridContainer").dxDataGrid("refresh");
            //$("#gridContainer_bp").dxDataGrid("refresh");
            $('#gridContainer_bp').dxPivotGrid('instance').getDataSource().reload();
            $('#gridContainer_bp_year').dxPivotGrid('instance').getDataSource().reload();

            var chart = $("#chart2").dxChart("instance");
            var ds = chart.option('dataSource');
            chart.option('dataSource', ds);
        }

        function formatNumber(number1) {

            if (number1 === undefined || number1 == 0 || isNaN(number1)) {
                return '&nbsp;';
            }

            let number = Number(number1);

            let str = number.toString();

            if (str.indexOf('.') > 0) {
                let n1 = str.split('.')[1];
                let n2 = str.split('.')[0];
                if (Number('0.' + n1) >= 0.4) {

                    if (Number(n2) >= 0)
                        number = Number(n2) + 1;
                    else
                        number = Number(n2) - 1;
                }
                else {
                    number = Number(n2);
                }
            }

            return number.toLocaleString("en-US");
        }

    </script>
}

@{
    DateTime beginMonth = DateTime.Parse(DateTime.Now.ToString("yyyy-MM") + "-01");
}

<div class="content container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="row align-items-center" style="margin-bottom:-2rem">
            <div class="col">
                <h3 class="page-title">Taxi report</h3>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/Admin/Home/Index">Home</a></li>
                    <li class="breadcrumb-item active">Taxi report</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form">
                <div class="dx-fieldset">
                    <div class="dx-field">
                        <div style="float:left;display:inline-block;margin-right:10px">

                            @(Html.DevExtreme().DateBox()
                                .ID("begindate-date")
                                .Type(DateBoxType.Date)
                                .Value(beginMonth)
                                .DisplayFormat("yyyy-MM-dd")
                                .Width(200)
                                .Placeholder("Select...")
                                .Label("Input Date From")
                                .OnValueChanged("refreshGrid")
                                )

                        </div>
                        <div style="display:inline-block;margin-right:10px">
                            @(Html.DevExtreme().DateBox()
                                .ID("todate-date")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now.AddDays(1))
                                .DisplayFormat("yyyy-MM-dd")
                                .Width(200)
                                .Placeholder("Select...")
                                .Label("Input Date To")
                                .OnValueChanged("refreshGrid")
                                )
                        </div>
                        <div style="display:inline-block">
                            @(Html.DevExtreme().SelectBox()
                                .ID("slBophan")
                                .InputAttr("aria-label", "Department")
                                .DataSource(d => d.Mvc().LoadAction("GetBoPhan2").Key("Id"))
                                .DisplayExpr("TenBoPhan")
                                .ValueExpr("Id")
                                .OnValueChanged("refreshGrid")
                                )
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12" style="margin-bottom:20px">
            <h5>Báo cáo số tiền, số lần bộ phận sử dụng theo khoảng thời gian</h5>
            @(
                Html.DevExtreme().PivotGrid<TongHopBoPhan>()
                .ID("gridContainer_bp")
                .AllowSortingBySummary(true)
                .AllowSorting(true)
                .AllowFiltering(true)
                .ShowBorders(true)
                .FieldChooser(fc => fc.Enabled(false))
                .DataSource(d => d
                .Store(s => s.Mvc().Controller("DangKyXe").LoadAction("ReportTaxiTotalByBoPhan")
                .LoadParams(new { fromTime = new JS("getDateBoxValueFrom"), toTime = new JS("getDateBoxValueTo"), bophan = new JS("getSelectBoxValue") }))
                .Fields(fields =>
                {
                    fields.AddFor(m => m.RowTital)
                    .Width(120)
                    .Area(PivotGridArea.Row);

                    fields.AddFor(m => m.BoPhan)
                    .Area(PivotGridArea.Column);

                    fields.AddFor(m => m.SoTien_SD)
                    .Caption("Amount")
                    .Area(PivotGridArea.Data)
                    .SummaryType(SummaryType.Sum)
                    .Format(Format.FixedPoint);
                })).ShowRowGrandTotals(false)
                )
        </div>
        <div class="col-md-12" style="margin-bottom:20px">
            <h5>Báo cáo số tiền bộ phận sử dụng theo tháng</h5>
            @(Html.DevExtreme().PivotGrid<TongHopBoPhan>()
                .ID("gridContainer_bp_year")
                .AllowSortingBySummary(true)
                .AllowSorting(true)
                .AllowFiltering(true)
                .ShowBorders(true)
                .FieldChooser(fc => fc.Enabled(false))
                .DataSource(d => d
                .Store(s => s.Mvc().Controller("DangKyXe").LoadAction("ReportTaxiTotalByBoPhanInYear")
                .LoadParams(new { year = new JS("getDateBoxValueFromYear") }))
                .Fields(fields =>
                {
                    fields.AddFor(m => m.RowTital)
                    .Width(120)
                    .Area(PivotGridArea.Row);

                    fields.AddFor(m => m.ColumnTital)
                    .Area(PivotGridArea.Column);

                    fields.AddFor(m => m.SoTien_SD)
                    .Caption("Amount")
                    .Area(PivotGridArea.Data)
                    .SummaryType(SummaryType.Sum)
                    .Format(Format.FixedPoint);
                }))
                )
        </div>
        <div class="col-md-12">
            @(Html.DevExtreme().Chart()
                .ID("chart")
                .DataSource(d => d.WebApi().Controller("DangKyXe").LoadAction("DataReportTaxiTotalByBoPhanInYear").LoadParams(new { year = new JS("getDateBoxValueFromYear") }))
                @*            .DataSource(d => d
            .StaticJson()
            .Url(Url.Action("DataReportTaxiTotalByBoPhanInYear", "DangKyXe", new { year = new JS("getDateBoxValueFromYear") }))
            )*@
                .CommonSeriesSettings(s => s
                .ArgumentField("Month")
                .Type(SeriesType.Bar)
                )
                .Series(s =>
                {
                    s.Add().ValueField("Account").Name("Account");
                    s.Add().ValueField("CSP").Name("CSP");
                    s.Add().ValueField("EHS").Name("EHS");
                    s.Add().ValueField("GOC").Name("GOC");
                    s.Add().ValueField("Guest").Name("Guest");
                    s.Add().ValueField("HR").Name("Human Resources");
                    s.Add().ValueField("Warehouse").Name("Warehouse");
                    s.Add().ValueField("LFEM").Name("LFEM");
                    s.Add().ValueField("PI").Name("PI");
                    s.Add().ValueField("Purchase").Name("Purchase");
                    s.Add().ValueField("QC").Name("QC");
                    s.Add().ValueField("SMT").Name("SMT");
                    s.Add().ValueField("Support").Name("Support");
                    s.Add().ValueField("UTILITY").Name("Utility");
                    s.Add().ValueField("WLP1").Name("WLP1");
                    s.Add().ValueField("WLP2").Name("WLP2");
                })
                .Legend(l => l
                .HorizontalAlignment(HorizontalAlignment.Right)
                .Position(RelativePosition.Inside)
                .Border(b => b.Visible(true))
                .ColumnCount(4)
                )
                .Title("Monthly costs")
                .Export(e => e.Enabled(true))
                .Tooltip(t => t
                .Enabled(true)
                .CustomizeTooltip(@<text>
                    function(arg) {
                  @*  console.log(arg);*@
                    return {
                    text: arg.seriesName+ " : " + formatNumber(arg.valueText)
                    };
                    }
                </text>)
                )
                .Size(s => s.Height(500))
                .LoadingIndicator(l => l.Enabled(true))
                )

        </div>
        <div class="col-md-6">
            <h5>Báo cáo số tiền nhân viên sử dụng theo thời gian</h5>
            @(Html.DevExtreme().DataGrid<NguoiDungTaxi>
                ()
                .ID("gridContainer")
                .Height(550)
                .ShowBorders(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .Paging(paging => paging.Enabled(false))
                .AllowColumnResizing(true)
                .ColumnMinWidth(50)
                .ColumnAutoWidth(true)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                .OnExporting("exporting")
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .Selection(s => s.Mode(SelectionMode.Single))
                .HoverStateEnabled(true)
                .ColumnFixing(x => x.Enabled(true))
                .SearchPanel(searchPanel => searchPanel
                .Visible(true)
                .Width(240)
                .Placeholder("Search...")
                )
                .Columns(columns =>
                {
                    columns.AddFor(m => m.MaNV).Caption(localizer["MA_NHANVIEN"].Value);
                    columns.AddFor(m => m.TenNV).Caption(localizer["TEN_NGUOI_SU_DUNG"].Value);
                    columns.AddFor(m => m.BoPhan).Caption(localizer["BO_PHAN"].Value);
                    columns.AddFor(m => m.SoTien).Format(Format.FixedPoint).Caption(localizer["TONG_TIEN"].Value);
                    columns.AddFor(m => m.SoLanSuDung).Format(Format.FixedPoint).Caption(localizer["SO_LAN_SD"].Value);
                }).WordWrapEnabled(true)
                .DataSource(d => d.Mvc()
                .Area("Admin")
                .Controller("DangKyXe")
                .LoadAction("ReportTaxiByBoPhan")
                .LoadParams(new { fromTime = new JS("getDateBoxValueFrom"), toTime = new JS("getDateBoxValueTo"), bophan = new JS("getSelectBoxValue") })
                .Key("MaNV")
                ).Summary(s => s
                .TotalItems(totalItems =>
                {
                    totalItems.AddFor(m => m.MaNV).SummaryType(SummaryType.Count).DisplayFormat("Count: {0}").ValueFormat(Format.FixedPoint);
                    totalItems.AddFor(m => m.SoTien).SummaryType(SummaryType.Sum).DisplayFormat("Total: {0}").ValueFormat(Format.FixedPoint);
                    totalItems.AddFor(m => m.SoLanSuDung).SummaryType(SummaryType.Sum).DisplayFormat("Total: {0}").ValueFormat(Format.FixedPoint);
                }))
                )
        </div>
        <div class="col-md-6">
            @(Html.DevExtreme().Chart()
                    .ID("chart2")
                .DataSource(d => d.WebApi().Controller("DangKyXe").LoadAction("ReportTaxiByBoPhan").LoadParams(new { fromTime = new JS("getDateBoxValueFrom"), toTime = new JS("getDateBoxValueTo"), bophan = new JS("getSelectBoxValue") }))
                    .CommonSeriesSettings(s => s.ArgumentField("TenNV"))
                    .Panes(p =>
                    {
                        p.Add().Name("TopPane");
                        p.Add().Name("BottomPane");
                    })
                    .DefaultPane("BottomPane")
                    .Series(s =>
                    {
                        s.Add()
                    .Pane("TopPane")
                    .ValueField("SoLanSuDung")
                    .Name("횟수")
                    .Label(l => l
                    .Visible(false));

                        s.Add()
                    .Type(SeriesType.Bar)
                    .ValueField("SoTien")
                    .Name("금액")
                    .Label(l => l
                    .Visible(false));
                    })
                .ValueAxis(a =>
                {
                    a.Add()
                    .Pane("BottomPane")
                    .Grid(g => g.Visible(true))
                    .Title(t => t.Text("금액"));
                    a.Add()
                    .Pane("TopPane")
                    .Grid(g => g.Visible(true))
                    .Title(t => t.Text("횟수"));
                })
                .Legend(l => l
                .VerticalAlignment(VerticalEdge.Bottom)
                .HorizontalAlignment(HorizontalAlignment.Center)
                )
                .Export(e => e.Enabled(true))
                .Title(t => t.Text("Chart ")).Tooltip(t => t
                .Enabled(true)
                .CustomizeTooltip(@<text>
                    function(arg) {
                    console.log(arg);
                    return {
                    text: arg.argumentText+ "\n 금액: " + formatNumber(arg.point.data.SoTien) + "\n 횟수: " + formatNumber(arg.point.data.SoLanSuDung)
                    };
                    }
                </text>)
                )

                )

        </div>
    </div>
</div>







