@model StayLotListDisPlayViewModel
@{
    ViewData["Title"] = "Hold Lot List";
    Layout = "~/Areas/OpeationMns/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
    </style>
}

@section Scripts{
    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>
    <script>

        function getDataGridInstance() {
            return $("#grid-container-detail").dxDataGrid("instance");
        }

        // loc theo material
        function selection_changed(selectedItems) {
            var dataGrid = getDataGridInstance();
            var data = selectedItems.selectedRowsData;

            if (data.length > 0) {

                var arrModels = [];
                for (let value of data) {
                    arrModels.push(value.Material);
                }

                dataGrid.filter(["Material", "=", arrModels[data.length - 1]]);
            } else {
                dataGrid.clearFilter();
            }

        }

        // loc theo ten loi
        function selection_changed_loi(selectedItems) {
            var dataGrid = getDataGridInstance();
            var data = selectedItems.selectedRowsData;

            if (data.length > 0) {

                var arrTenLoi = [];
                for (let value of data) {

                    arrTenLoi.push(value.PhanLoaiLoi);
                }

                dataGrid.filter(["PhanLoaiLoi", "=", arrTenLoi[data.length - 1]]);
            }
            else {
                dataGrid.clearFilter();
            }
        }

        function onRowDblClick(e) {
            let dataGrid = $("#grid-container").dxDataGrid("instance");
            dataGrid.deselectAll();
            dataGrid.clearSelection();
        }

        function onRowDbl_loi_Click(e) {
            let dataGrid = $("#grid-container_loi").dxDataGrid("instance");
            dataGrid.deselectAll();
            dataGrid.clearSelection();
        }

        var dataGrid, loadPanel;
        $(function () {

            dataGrid = $("#grid-container-detail").dxDataGrid("instance");
            loadPanel = $("#loadPanel").dxLoadPanel("instance");

            loadPanel.show();
            sendRequest('@Url.RouteUrl(new { area = "OpeationMns", controller = "HoldLotList", action = "GetLotStayLfem" })')
                .always(() => { loadPanel.hide(); })
                .done((data) => {
                    dataGrid.option("dataSource", data);
                });
        });

        function onSaving(e) {
            var change = e.changes[0];
            console.log(change);
            if (change) {
                e.cancel = true;
                loadPanel.show();
                e.promise = saveChange(change)
                    .always(() => { loadPanel.hide(); })
                    .done((data) => {
                        var orders = e.component.option("dataSource");

                        console.log(change);
                        console.log(orders);
                        console.log(data);

                        if (change.type === "insert") {
                            change.data = data;
                        }

                        orders = DevExpress.data.applyChanges(orders, [change], { keyExpr: "KeyLfem" });

                        e.component.option({
                            dataSource: orders,
                            editing: {
                                editRowKey: null,
                                changes: []
                            }
                        });

                        e.component.refresh(true).done(() => {
                            if (change.data.UpdateByCassetteId == true)
                                location.reload();
                        });

                    });
            }
        };

        function saveChange(change) {
            switch (change.type) {
                case "update":
                    return sendRequest('@Url.RouteUrl(new { area= "OpeationMns", controller = "HoldLotList", action = "UpdateLotStayLfem" })', "PUT", { key: change.key, values: JSON.stringify(change.data) });
            }
        };

        function sendRequest(url, method, data) {
            var d = $.Deferred();

            method = method || "GET";

            $.ajax(url, {
                method: method,
                data: data,
                cache: false,
                xhrFields: { withCredentials: true }
            }).done(function (result) {
                d.resolve(method === "GET" ? result.data : result);
            }).fail(function (xhr) {
                d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
            });

            return d.promise();
        };

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('HoldLotListLFEM');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'HoldLotListLFEM.xlsx');
                });
            });
            e.cancel = true;
        }
    </script>
}

<div class="content container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="row align-items-center">
            <div class="col">
                <h3 class="page-title">Hold Lot List</h3>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/OpeationMns/Home/Index">Home</a></li>
                    <li class="breadcrumb-item active">Hold Lot List</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            @(Html.DevExtreme().DataGrid<StayLotListSumViewModel>()
                .ID("grid-container")
                .DataSource(Model.StayLotListSumViews)
                .Height(280)
                .ShowBorders(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .Paging(paging => paging.Enabled(false))
                .AllowColumnResizing(true)
                .ColumnMinWidth(50)
                .ColumnAutoWidth(true)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .HoverStateEnabled(true)
                .Selection(s => s.Mode(SelectionMode.Single))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.MaterialCategory).Width(150);
                    columns.AddFor(m => m.MaterialGroup).Width(150);
                    columns.AddFor(m => m.Size).Width(150);
                    columns.AddFor(m => m.Material).Width(150);
                    columns.AddFor(m => m.QtyChip).Width(140).Format(Format.FixedPoint);
                }).Summary(s => s.TotalItems(items =>
                {
                    items.AddFor(m => m.MaterialCategory).SummaryType(SummaryType.Count).DisplayFormat("Count: {0}");
                    items.AddFor(m => m.QtyChip)
                    .SummaryType(SummaryType.Sum)
                    .ValueFormat(Format.FixedPoint)
                    .DisplayFormat("Total: {0}");

                })).OnSelectionChanged("selection_changed").OnRowDblClick("onRowDblClick"))
        </div>
        <div class="col-md-3">
            @(Html.DevExtreme().DataGrid<StayLotListSumViewModel>()
                .ID("grid-container_loi")
                .DataSource(Model.StayLotListTenLoiViews)
                .Height(280)
                .ShowBorders(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .Paging(paging => paging.Enabled(false))
                .AllowColumnResizing(true)
                .ColumnMinWidth(50)
                .ColumnAutoWidth(true)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .HoverStateEnabled(true)
                .Selection(s => s.Mode(SelectionMode.Single))
                .Columns(columns =>
                {
                    columns.AddFor(m => m.PhanLoaiLoi).Caption("Loại Hình Lỗi");
                    columns.AddFor(m => m.QtyChip).Format(Format.FixedPoint);
                }).WordWrapEnabled(true).Summary(s => s.TotalItems(items =>
                {
                    items.AddFor(m => m.PhanLoaiLoi).SummaryType(SummaryType.Count).DisplayFormat("Count: {0}");

                    items.AddFor(m => m.QtyChip)
                    .SummaryType(SummaryType.Sum)
                    .ValueFormat(Format.FixedPoint)
                    .DisplayFormat("Total: {0}");

                })).OnSelectionChanged("selection_changed_loi").OnRowDblClick("onRowDbl_loi_Click"))
        </div>
    </div>

    <div class="row" style="margin-top:10px">
        <div class="col-md-12">
            @(Html.DevExtreme().LoadPanel()
                .ID("loadPanel")
                .Position(p => p.Of("#grid-container-detail"))
                .Visible(false)
                )
            @(Html.DevExtreme().DataGrid<StayLotList_Ex_ViewModel>()
                .ID("grid-container-detail")
                .KeyExpr("KeyLfem")
                .Height(480)
                .ShowBorders(true)
                .RepaintChangesOnly(true)
                .LoadPanel(loadPanel => loadPanel.Enabled(false))
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .Paging(paging => paging.Enabled(false))
                .AllowColumnResizing(true)
                .ColumnMinWidth(50)
                .ColumnAutoWidth(true)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .HoverStateEnabled(true)
                .Selection(s => s.Mode(SelectionMode.Single))
                .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                .OnExporting("exporting")
                .ColumnFixing(x => x.Enabled(true))
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Row);
                    editing.AllowUpdating(true);
                })
                .Columns(columns =>
                {
                    columns.AddFor(m => m.KeyLfem).AllowEditing(false).Fixed(true).Visible(false).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.MaterialCategory).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.MaterialGroup).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.Size).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.Material).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.LotId).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
                    columns.AddFor(m => m.FA_ID).AllowEditing(false);
                    columns.AddFor(m => m.AssyLotID).AllowEditing(false).Format(Format.FixedPoint);
                    columns.AddFor(m => m.Date).AllowEditing(false);
                    columns.AddFor(m => m.OperationName).AllowEditing(false);
                    columns.AddFor(m => m.DATE_DIFF).AllowEditing(false);
                    columns.AddFor(m => m.ChipQty).Format(Format.FixedPoint).AllowEditing(false);
                    columns.AddFor(m => m.Worker).AllowEditing(false);
                    columns.AddFor(m => m.Comment).AllowEditing(false);
                    columns.AddFor(m => m.PhanLoaiLoi).Caption("Phân Loại Lỗi").AllowEditing(true);
                    columns.AddFor(m => m.LichTrinhXuLy).Caption("Lịch Trình Xử Lý").AllowEditing(true);
                    columns.AddFor(m => m.ChiuTrachNhiem).Caption("Chịu Trách Nhiệm").AllowEditing(true);
                    columns.AddFor(m => m.UpdateByCassetteId).Caption("Update theo Material").AllowEditing(true);
                }).WordWrapEnabled(true).OnSaving("onSaving").
                Summary(s => s.TotalItems(items =>
                {
                    items.AddFor(m => m.LotId).SummaryType(SummaryType.Count).DisplayFormat("Count: {0}");
                    items.AddFor(m => m.ChipQty).SummaryType(SummaryType.Sum).ValueFormat(Format.FixedPoint).DisplayFormat("Sum: {0}");
                }))
                )
        </div>
    </div>
</div>
