@{
    ViewData["Title"] = "LotTestHistory";
    Layout = "~/Areas/OpeationMns/Views/Shared/_Layout.cshtml";
}
@section Scripts
    {

    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>

    <script>

        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('LotTestHistory');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'LotTestHistory.xlsx');
                });
            });
            e.cancel = true;
        }

        function getDateBoxValueFrom() {
            return $("#begindate-date").dxDateBox("option", "text");
        }

        function getDateBoxValueTo() {
            return $("#todate-date").dxDateBox("option", "text");
        }

        function refreshGrid() {

            let fromDate = new Date($("#begindate-date").dxDateBox("option", "text"));
            let toDate = new Date($("#todate-date").dxDateBox("option", "text"));

            if (fromDate <= toDate) {
                $("#gridContainer").dxDataGrid("refresh");
            }
        }
    </script>
}

@{
    DateTime beginMonth = DateTime.Parse(DateTime.Now.ToString("yyyy-MM") + "-01");
}
<div class="content container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="row align-items-center" style="margin-bottom:-2rem">
            <div class="col">
                <h3 class="page-title">내용정리/Nội dung yêu cầu Test/ Input</h3>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/OpeationMns/Home/Index">Home</a></li>
                    <li class="breadcrumb-item active">내용정리</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form">
                <div class="dx-fieldset">
                    <div class="dx-field">
                        <div style="float:left;display:inline-block;margin-right:10px">

                            @(Html.DevExtreme().DateBox()
                                .ID("begindate-date")
                                .Type(DateBoxType.Date)
                                .Value(beginMonth)
                                .DisplayFormat("yyyy-MM-dd")
                                .Width(200)
                                .Placeholder("Select...")
                                .Label("Input Date From")
                                .OnValueChanged("refreshGrid")
                                )

                        </div>
                        <div style="display:inline-block;margin-right:10px">
                            @(Html.DevExtreme().DateBox()
                                .ID("todate-date")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now.AddDays(1))
                                .DisplayFormat("yyyy-MM-dd")
                                .Width(200)
                                .Placeholder("Select...")
                                .Label("Input Date To")
                                .OnValueChanged("refreshGrid")
                                )
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12">
            @(
                Html.DevExtreme().DataGrid<LOT_TEST_HISTOTY_LFEM>
                ()
                .ID("gridContainer")
                .Height(700)
                .ShowBorders(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .Paging(paging => paging.Enabled(false))
                .AllowColumnResizing(true)
                .ColumnAutoWidth(true)
                .ShowColumnLines(true)
                .ShowRowLines(true)
                .RowAlternationEnabled(true)
                .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                .OnExporting("exporting")
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .Selection(s => s.Mode(SelectionMode.Single))
                .HoverStateEnabled(true)
                .ColumnFixing(x => x.Enabled(true))
                .SearchPanel(searchPanel => searchPanel
                .Visible(true)
                .Width(240)
                .Placeholder("Search...")
                )
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Popup)
                    .AllowUpdating(true)
                    .AllowDeleting(true)
                    .AllowAdding(true)
                    .Popup(p => p
                    .Title("내용정리/Nội dung yêu cầu Test/ Input")
                    .ShowTitle(true)
                    .Width(800)
                    .Height(450)
                    ).Form(f => f.Items(items =>
                    {
                        items.AddGroup()
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.Date);
                        groupItems.AddSimpleFor(m => m.HangMuc);
                        groupItems.AddSimpleFor(m => m.MucDich);
                        groupItems.AddSimpleFor(m => m.LotNo);

                    });

                        items.AddGroup()
                    .Caption("Thông Tin Hạng Mục Kiểm Chứng")
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.ChiLayKetQua);
                        groupItems.AddSimpleFor(m => m.FA_Module);
                        groupItems.AddSimpleFor(m => m.DTC_Module);
                    });

                    }));
                })
                .Columns(columns =>
                {
                    columns.AddFor(m => m.Id).Caption("Id").Visible(false).AllowEditing(false); ;
                    columns.AddFor(m => m.Date).Format("yyyy-MM-dd").Caption("Ngày").Visible(true).AllowEditing(true);
                    columns.AddFor(m => m.HangMuc).Caption("Hạng Mục").Visible(true).AllowEditing(true);
                    columns.AddFor(m => m.MucDich).Caption("Mục Đích").AllowEditing(true);

                    columns.AddFor(m => m.ModelName).Caption("Model Name").AllowEditing(false);

                    columns.Add().Caption("Lot NoLot 정보 / Thông tin lot hàng").Columns(c =>
                    {
                        c.AddFor(m => m.LotNo).Caption("LotNo").AllowEditing(true);
                        c.AddFor(m => m.Qty).Caption("Q'ty").Format(Format.FixedPoint).AllowEditing(false);
                    });

                    columns.Add().Caption("Hạng mục kiểm chứng").Columns(c =>
                    {
                        c.AddFor(m => m.ChiLayKetQua).Caption("Chỉ lấy kết quả").AllowEditing(true);
                        c.AddFor(m => m.FA_Module).Caption("FA Module").AllowEditing(true);
                        c.AddFor(m => m.DTC_Module).Caption("ĐTC Module").AllowEditing(true);
                    });

                    columns.AddFor(m => m.Operation).Caption("Công đoạn").AllowEditing(false);
                    columns.AddFor(m => m.KetQua).Caption("Kết quả").AllowEditing(false);
                }).WordWrapEnabled(true)
                .DataSource(d => d.Mvc()
                .Area("OpeationMns")
                .Controller("DailyPlan")
                .LoadAction("GetLotTest")
                .LoadParams(new { fromTime = new JS("getDateBoxValueFrom"), toTime = new JS("getDateBoxValueTo") })
                .UpdateAction("PutLotTest")
                .InsertAction("PostLotTest")
                .DeleteAction("DeleteLotTest")
                .Key("Id")
                ).Summary(s => s
                .TotalItems(totalItems =>
                {
                    totalItems.AddFor(m => m.Date).SummaryType(SummaryType.Count).DisplayFormat("Count: {0}").ValueFormat(Format.FixedPoint);
                })
                )
                )
        </div>
    </div>
    @(Html.DevExtreme().Tooltip()
        .ID("tooltip")
        .Position(Position.Right)
        )
</div>


