@{
    ViewData["Title"] = "Công Đoàn";
    Layout = "~/Areas/Payroll/Views/Shared/_Layout.cshtml";
}

@section Scripts
{
    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>
    <script>

        var dataGrid, loadPanel, dataGridTmp;

        $(function ()
        {
            LoadData();
        });

        function LoadData() {
                    dataGrid = $("#gridContainer1").dxDataGrid("instance");
                    loadPanel = $("#loadPanel").dxLoadPanel("instance");

            loadPanel.show();
            sendRequest('@Url.RouteUrl(new { area = "Payroll", controller = "ConDoan", action = "Get" })', "GET")
                    .always(() => { loadPanel.hide(); })
                    .done((data) => {
                        dataGrid.option("dataSource", data);
                    });
        }

        function SaveCongDoan(e) {

       var change = e.changes[0];

      if (change) {
          e.cancel = true;
          loadPanel.show();
          e.promise = saveChange(change)
              .always(() => { loadPanel.hide(); })
              .done((data) => {
                  var datas = e.component.option("dataSource");

                  if (change.type === "insert") {
                      change.data = data;
                  }

                  datas = DevExpress.data.applyChanges(datas, [change], { keyExpr: "Id" });

                  e.component.option({
                      dataSource: datas,
                      editing: {
                          editRowKey: null,
                          changes: []
                      }
                  });

                  LoadData();
              });
      }
    };

        function saveChange(change)
        {
            console.log(change);
            switch (change.type)
            {
                    case "insert":
                        return sendRequest('@Url.RouteUrl(new { area = "Payroll", controller = "ConDoan", action = "Insert" })', "POST", { values: JSON.stringify(change.data) });
                    case "update":
                        return sendRequest('@Url.RouteUrl(new { area = "Payroll", controller = "ConDoan", action = "Put" })', "PUT", { key: change.key, values: JSON.stringify(change.data) });
                    case "remove":
                        return sendRequest('@Url.RouteUrl(new { area = "Payroll", controller = "ConDoan", action = "Delete" })', "DELETE", { key: change.key });
            }
        };

            function sendRequest(url, method, data) {
                var d = $.Deferred();

                method = method || "GET";

                $.ajax(url, {
                    method: method,
                    data: data,
                    cache: false,
                    xhrFields: { withCredentials: true }
                }).done(function (result) {
                    d.resolve(method === "GET" ? result.data : result);
                }).fail(function (xhr) {
                    d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                });

                return d.promise();
        };

        // Xuất excel luong
        function exporting(e) {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('CongDoan');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'CongDoan.xlsx');
                });
            });
            e.cancel = true;
        }

        function calculateFilterExpression(filterValue, selectedFilterOperation, target) {
            if (target === "search" && typeof (filterValue) === "string") {
                return [this.dataField, "contains", filterValue]
            }

            return function (data) {
                return (data.AssignedEmployee || []).indexOf(filterValue) !== -1
            }
        }
    </script>
}


<div class="content container-fluid">
    <div class="page-header">
        <div class="row">
            <div class="col-sm-12">
                <h3 class="page-title">Thông Tin Nhân Viên Không Đăng Ký Tham Gia Công Đoàn</h3>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/Payroll/Home/Index">Home</a></li>
                    <li class="breadcrumb-item active">Không Tham Gia Công Đoàn</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @(Html.DevExtreme().LoadPanel()
                      .ID("loadPanel")
                      .Position(p => p.Of("#gridContainer1"))
                      .Visible(false)
                )
            @(Html.DevExtreme().DataGrid<CONGDOAN_NOT_JOIN>
    ()
    .ID("gridContainer1")
    .KeyExpr("Id")
    .Height(700)
    .ShowBorders(true)
    .ColumnAutoWidth(true)
    .ColumnMinWidth(150)
    .RepaintChangesOnly(true)
    .LoadPanel(loadPanel => loadPanel.Enabled(false))
    .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
    .Paging(paging => paging.Enabled(false))
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .RowAlternationEnabled(true)
    .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto)
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Form);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(m => m.Id).Visible(false).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.MaNV)
               .Caption("Mã NV").AllowEditing(true)
               .Lookup(lookup => lookup
               .DataSource(d => d.Mvc().Controller("DCChamCong").LoadAction("Employees").Key("Id"))
               .ValueExpr("Id")
               .DisplayExpr("TenNV")
           )
       .CalculateFilterExpression("calculateFilterExpression");

        columns.AddFor(m => m.HR_NHANVIEN.HR_BO_PHAN_DETAIL.MaBoPhan_TOP2).Caption("Bộ Phận").AllowEditing(false);
        columns.AddFor(m => m.HR_NHANVIEN.NgayVao).Caption("Ngày Vào").AllowEditing(false);
        columns.AddFor(m => m.NgayBatDau).Format("yyyy-MM-01").Caption("Tháng Bắt Đầu Không Tham Gia").AllowEditing(true);
        columns.AddFor(m => m.NguyenNhan).Caption("Lý Do Không Tham Gia").AllowEditing(true);

    }).SearchPanel(searchPanel => searchPanel.Visible(true)).WordWrapEnabled(true).OnSaving("SaveCongDoan").Summary(s => s.TotalItems(items =>
    {
        items.AddFor(m => m.MaNV)
            .SummaryType(SummaryType.Count);
    })
    )
    )
        </div>
    </div>
</div>

