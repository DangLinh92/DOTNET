@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@{
    ViewData["Title"] = "Kế Hoạch An Toàn Bức Xạ";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Scripts{
    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>
    <script>
        var dataGrid, loadPanel, dataGridTmp;

        $(function () {
            let currentYear = new Date().getFullYear();
            LoadData(currentYear);
            });

        function LoadData(txtYear) {
                    dataGrid = $("#gridContainer").dxDataGrid("instance");
                    loadPanel = $("#loadPanel").dxLoadPanel("instance");

            loadPanel.show();
            sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "KeHoachATBX" })', "GET", { year: txtYear })
                    .always(() => { loadPanel.hide(); })
                    .done((data) => {
                        console.log(data);
                        dataGrid.option("dataSource", data);
                    });
        }

        // SAVE KE HOACH DAO TAO ATVSLD
        function SaveKeHoach(e) {

      var change = e.changes[0];
      console.log(change);
      if (change) {
          e.cancel = true;
          loadPanel.show();
          e.promise = saveChange(change)
              .always(() => { loadPanel.hide(); })
              .done((data) => {
                  var datas = e.component.option("dataSource");

                  if (change.type === "insert") {
                      change.data = data;
                  }

                  datas = DevExpress.data.applyChanges(datas, [change], { keyExpr: "Id" });

                  e.component.option({
                      dataSource: datas,
                      editing: {
                          editRowKey: null,
                          changes: []
                      }
                  });
              });
      }
    };

        function saveChange(change) {

            switch (change.type) {
                    case "insert":
                        return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "Insert" })', "POST", { values: JSON.stringify(change.data) });
                    case "update":
                        return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "Update" })', "PUT", { key: change.key, values: JSON.stringify(change.data) });
                    case "remove":
                      return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "Delete" })', "DELETE", { key: change.key });
                }
            };

            function sendRequest(url, method, data) {
                var d = $.Deferred();

                method = method || "GET";

                $.ajax(url, {
                    method: method,
                    data: data,
                    cache: false,
                    xhrFields: { withCredentials: true }
                }).done(function (result) {
                    d.resolve(method === "GET" ? result.data : result);
                }).fail(function (xhr) {
                    d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                });

                return d.promise();
        };

        function selectedDate_changed(data) {

            let sDate = data.value;
            if (sDate == '') {
                var date = new Date();
            }
            else {
                var date = new Date(sDate);
            }
            // Get year, month, and day part from the date
            var year = date.toLocaleString("default", { year: "numeric" });
            LoadData(year);
        };

        // show popup chi tiet ngay thuc hien

        function DetailChiTietNgayThuHien(e) {

            console.log(e.data.NoiDung);

            const popup = $("#detail-popup").dxPopup("instance");
            popup.option({
                contentTemplate: $("#popup-template")
            });
            popup.show();

            dataGridTmp = $("#gridContainer-NgayThucHien").dxDataGrid("instance");
            sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "GetThucHienATBX" })', "GET", { key: e.key })
                    .always(() => {  })
                    .done((data) => {
                        console.log(data);
                        dataGridTmp.option("dataSource", data);
                    });

            $('#txtTitlePopup').text(e.data.HangMuc);
            $('#txt_MaKH').val(e.key);
        }

        function saveChangeNgayThucHien(change) {

             let _maKH = $('#txt_MaKH').val();

             if (change.type == "insert" || change.type == "update") {
                 if (change.data.hasOwnProperty("NgayBatDauEx") && change.data.NgayBatDauEx instanceof Date) {
                     change.data.NgayBatDauEx = change.data.NgayBatDauEx.toDateString();
                 }

                 if (change.data.hasOwnProperty("NgayKetThucEx") && change.data.NgayKetThucEx instanceof Date) {
                     change.data.NgayKetThucEx = change.data.NgayKetThucEx.toDateString();
                 }
             }

             console.log(change);

            switch (change.type) {
                    case "insert":
                    return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "AddThoiGianATBX" })', "POST", { values: JSON.stringify(change.data), maKH: _maKH });
                    case "update":
                        return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "UpdateThoiGianATBX" })', "PUT", { key: change.key, values: JSON.stringify(change.data) });
                    case "remove":
                      return sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsKeHoachAnToanBucXa", action = "DeleteThoiGianATBX" })', "DELETE", { key: change.key });
                }
        };

        // luu ngay quan trac
        function SaveNgayThucHien(e) {
            var change = e.changes[0];
            console.log(change);
            if (change) {
                e.cancel = true;

                e.promise = saveChangeNgayThucHien(change)
                    .always(() => {  })
                    .done((data) => {
                        var datas = e.component.option("dataSource");

                        if (change.type === "insert") {
                            change.data = data;
                        }

                        datas = DevExpress.data.applyChanges(datas, [change], { keyExpr: "Id" });

                        e.component.option({
                            dataSource: datas,
                            editing: {
                                editRowKey: null,
                                changes: []
                            }
                        });
                    });
            }
        }

        function exporting(e)
        {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('An Toàn Bức Xạ - 매년 핵 방사 안전 실시 업무');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'KH_Antoanbucxa - 매년 핵 방사 안전 실시 업무.xlsx');
                });
            });
            e.cancel = true;
        }

        // IMPORT EXCEL START
        $('#btn-import').on('click', function () {
            $("#fileInputExcel").val(null);
            $('#import_excel').modal('show');
        });

        $('#btnCloseImportExcel').on('click', function () {
            var fileUpload = $("#fileInputExcel").get(0);
            var files = fileUpload.files;
            if (files.length > 0) {
                $("#fileInputExcel").val(null);
                $('#import_excel').modal('hide');
                location.reload();
            }
        });

        $('#btnCloseImport').on('click', function () {
            var fileUpload = $("#fileInputExcel").get(0);
            var files = fileUpload.files;
            if (files.length > 0) {
                $("#fileInputExcel").val(null);
                $('#import_excel').modal('hide');
                location.reload();
            }
        });

        $('#btnImportExcel').on('click', function () {
            var fileUpload = $("#fileInputExcel").get(0);
            var files = fileUpload.files;

            // Create FormData object
            var fileData = new FormData();
            // Looping over all files and add it to FormData object
            for (var i = 0; i < files.length; i++) {
                fileData.append("files", files[i]);
            }

            $.ajax({
                url: '/Admin/EhsKeHoachAnToanBucXa/ImportExcel' ,
                type: 'POST',
                data: fileData,
                processData: false,  // tell jQuery not to process the data
                contentType: false,  // tell jQuery not to set contentType
                success: function (data) {
                    $('#import_excel').modal('hide');
                    hrms.notify("Import success!", 'Success', 'alert', function () {
                        location.reload();
                    });
                },
                error: function (status) {
                    hrms.notify('error: Import error!', 'error', 'alert', function () { });
                }
            });
            return false;
        });

        function getStatus() {
            return ["Pending", "TODO", "Inprogress", "Completed"];
        };

        function getShowBoard() {
            return ["Y", "N"];
        };
    </script>
}
@section Styles{}


<div class="content container-fluid">
    <div class="page-header" style="margin-bottom:-1rem">
        <div class="row">
            <div class="col-sm-12">
                <h3 class="page-title">@(localizer["KEHOACH_ATBX"])</h3>
            </div>
        </div>
    </div>

    <div class="row align-items-center">
        <div class="col">
            <div class="form">
                <div class="dx-fieldset">
                    <div class="dx-field">
                        <div>
                            @(Html.DevExtreme().DateBox()
                                  .ID("txt_year")
                                  .Value(DateTime.Now.Year.ToString())
                                  .CalendarOptions(x=>x.MaxZoomLevel(CalendarZoomLevel.Decade))
                                  .DisplayFormat("yyyy")
                                  .Width(200)
                                  .Placeholder("Select...")
                                  .Label("Year")
                                  .OnValueChanged("selectedDate_changed")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-auto float-right ml-auto" style="margin-right:100px;">
            <div class="btn-group">
                <button type="button" class="btn btn-info dropdown-toggle" id="btnImport" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Excel</button>
                <div class="dropdown-menu" style="">
                    <a class="dropdown-item" href="~/templates/EHS_KeHoach_AntoanBucXa.xlsx">File mẫu kế hoạch An toàn bức xạ</a>
                    <a class="dropdown-item" href="#" id="btn-import">Import Kế Hoạch An toàn bức xạ</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @(Html.DevExtreme().LoadPanel()
        .ID("loadPanel")
        .Position(p => p.Of("#gridContainer"))
        .Visible(false)
)
            @(Html.DevExtreme().DataGrid<EhsKeHoachAnToanBucXaViewModel>
    ()
    .ID("gridContainer")
    .KeyExpr("Id")
    .Height(780)
    .ShowBorders(true)
      .RepaintChangesOnly(true)
     .LoadPanel(loadPanel => loadPanel.Enabled(false))
    .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
    .Paging(paging => paging.Enabled(false))
    .AllowColumnResizing(true)
    .ColumnMinWidth(50)
    .ColumnAutoWidth(true)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .RowAlternationEnabled(true)
    .FilterRow(filterRow => filterRow
    .Visible(true)
    .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Row);
        editing.AllowUpdating(true);
        editing.AllowDeleting(true);
        editing.AllowAdding(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(m => m.Id).Visible(false).AllowEditing(false).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.STT).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.HangMuc).Caption(@localizer["HANG_MUC"].Value).Width(150).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.NoiDung).Caption(@localizer["NOI_DUNG"].Value).Width(150).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.MaHieu).Caption(@localizer["MA_HIEU"].Value).Width(150).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.ChuKyThucHien).Caption(@localizer["CHU_KY_THUC_HIEN"].Value).Width(80).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.Year).Caption(@localizer["YEAR"].Value).Width(80).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.ThoiGianCapL1).Caption(@localizer["THOI_GIAN_CAP_LAN_DAU"].Value).Width(100).AllowEditing(false);
        columns.AddFor(m => m.ThoiGianCapLai_L1).Caption(@localizer["THOI_GIAN_CAP_LAI"].Value).Width(100).AllowEditing(false);
        columns.AddFor(m => m.ThoiGianCapLai_L2).Caption(@localizer["THOI_GIAN_CAP_LAI"].Value).Width(100).AllowEditing(false);
        columns.AddFor(m => m.ThoiGianCapLai_L3).Caption(@localizer["THOI_GIAN_CAP_LAI"].Value).Width(100).AllowEditing(false);
        columns.AddFor(m => m.ThoiGianCapLai_L4).Caption(@localizer["THOI_GIAN_CAP_LAI"].Value).Width(100).AllowEditing(false);

        columns.AddFor(m => m.YeuCau).Caption(@localizer["YEU_CAU"].Value).Width(100).AllowEditing(true);
        columns.AddFor(m => m.QuyDinhVBPL).Caption(@localizer["LUAT_DINH_LIEN_QUAN"].Value).Width(100).AllowEditing(true);
        columns.AddFor(m => m.NguoiPhuTrach).Caption(@localizer["NGUOI_PHU_TRACH"].Value).Width(80).AllowEditing(true);
        columns.AddFor(m => m.NhaThau).Caption(@localizer["NHA_THAU"].Value).Width(80).AllowEditing(true);
        columns.AddFor(m => m.CostMonth_1).Caption(@localizer["CHI_PHI_THANG_1"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_2).Caption(@localizer["CHI_PHI_THANG_2"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_3).Caption(@localizer["CHI_PHI_THANG_3"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_4).Caption(@localizer["CHI_PHI_THANG_4"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_5).Caption(@localizer["CHI_PHI_THANG_5"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_6).Caption(@localizer["CHI_PHI_THANG_6"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_7).Caption(@localizer["CHI_PHI_THANG_7"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_8).Caption(@localizer["CHI_PHI_THANG_8"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_9).Caption(@localizer["CHI_PHI_THANG_9"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_10).Caption(@localizer["CHI_PHI_THANG_10"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_11).Caption(@localizer["CHI_PHI_THANG_11"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostMonth_12).Caption(@localizer["CHI_PHI_THANG_12"].Value).AllowEditing(true).Format("#,##0");
        columns.AddFor(m => m.CostTotal).Caption("Total").AllowEditing(false).Format("#,##0");

    }).SearchPanel(searchPanel => searchPanel.Visible(true)).WordWrapEnabled(true).Summary(s=>s.TotalItems(tt => {
        tt.AddFor(m => m.CostMonth_1).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_2).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_3).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_4).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_5).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_6).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_7).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_8).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_9).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_10).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_11).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostMonth_12).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.CostTotal).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
    })).OnSaving("SaveKeHoach").OnRowDblClick("DetailChiTietNgayThuHien")
    )
            @(Html.DevExtreme().Popup()
        .ID("detail-popup")
        .Width(800)
        .Height(500)
        .Container("#gridContainer")
        .ShowTitle(true)
        .Title("Ngày Thực Hiện Chi Tiết")
        .DragEnabled(false)
        .HideOnParentScroll(true)
        .ShowCloseButton(false)
        .Position(positionConfig => positionConfig
            .At(HorizontalAlignment.Center, VerticalAlignment.Center)
            .My(HorizontalAlignment.Center, VerticalAlignment.Center)
            .Collision(PositionResolveCollision.Fit, PositionResolveCollision.Fit)
        )
        .ToolbarItems(barItems => {
            barItems.Add()
                .Toolbar(Toolbar.Bottom)
                .Location(ToolbarItemLocation.After)
                .Widget(widget => widget.Button()
                    .Text("Close")
                    .OnClick(@<text>
                        function hideInfo(data) {

                           let _dataGridTmp = $("#gridContainer-NgayThucHien").dxDataGrid("instance");
                               _dataGridTmp.option("dataSource", []);

                            const popup = $("#detail-popup").dxPopup("instance");
                            popup.hide();
                        }
                    </text>)
                );
        })
    )


            @using (Html.DevExtreme().NamedTemplate("popup-template"))
            {
                <h4 id="txtTitlePopup"></h4>
                <input hidden id="txt_MaKH" />
                @(Html.DevExtreme().DataGrid<EhsThoiGianThucHienAnToanBucXaViewModel>()
    .ID("gridContainer-NgayThucHien")
      .KeyExpr("Id")
          .Height(300)
    .ShowBorders(true)
    .Paging(paging => paging.Enabled(false))
    .Editing(editing => {
        editing.Mode(GridEditMode.Row);
        editing.AllowAdding(true);
        editing.AllowDeleting(true);
        editing.AllowUpdating(true);
    })
    .Columns(columns => {
        columns.AddFor(m => m.NgayBatDauEx).Format("yyyy-MM-dd").Caption(@localizer["THOI_GIAN_BAT_DAU"].Value).AllowEditing(true);
        columns.AddFor(m => m.NgayKetThucEx).Format("yyyy-MM-dd").Caption(@localizer["THOI_GIAN_KET_THUC"].Value).AllowEditing(true);

        columns.AddFor(m => m.Status).Caption(@localizer["STATUS"].Value)
        .AllowEditing(true)
        .Lookup(lookup => lookup.DataSource("getStatus"));

        columns.AddFor(m => m.Progress).Caption(@localizer["TIEN_DO"].Value)
        .AllowEditing(true);

        columns.AddFor(m => m.IsShowBoard).Caption("Hiển thị lên bảng công việc")
        .AllowEditing(true)
        .Lookup(lookup => lookup.DataSource("getShowBoard")
                );
    }).OnSaving("SaveNgayThucHien")
)
            }
        </div>
    </div>
</div>

<partial name="_ImportExcelModel" />



