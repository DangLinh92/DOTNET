@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@{
    ViewData["Title"] = "Kế Hoạch Kiểm Định Máy Móc";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Scripts{
    <script src="~/js/exportFile_devextreme/polyfill.min.js"></script>
    <script src="~/js/exportFile_devextreme/exceljs.min.js"></script>
    <script src="~/js/exportFile_devextreme/FileSaver.min.js"></script>
    <script>
        var dataGrid, loadPanel, dataGridTmp;

        $(function () {
            let currentYear = new Date().getFullYear();
            LoadData(currentYear);
            });

        function LoadData(txtYear) {
                    dataGrid = $("#gridContainer").dxDataGrid("instance");
                    loadPanel = $("#loadPanel").dxLoadPanel("instance");

            loadPanel.show();
            sendRequest('@Url.RouteUrl(new { area = "admin", controller = "EhsTongHopDanhMucKeHoach", action = "TongHopKeHoachByYear" })', "GET", { year: txtYear })
                    .always(() => { loadPanel.hide(); })
                    .done((data) => {
                        console.log(data);
                        dataGrid.option("dataSource", data);
                    });
        }

            function sendRequest(url, method, data) {
                var d = $.Deferred();

                method = method || "GET";

                $.ajax(url, {
                    method: method,
                    data: data,
                    cache: false,
                    xhrFields: { withCredentials: true }
                }).done(function (result) {
                    d.resolve(method === "GET" ? result.data : result);
                }).fail(function (xhr) {
                    d.reject(xhr.responseJSON ? xhr.responseJSON.Message : xhr.statusText);
                });

                return d.promise();
        };

        function selectedDate_changed(data) {

            let sDate = data.value;
            if (sDate == '') {
                var date = new Date();
            }
            else {
                var date = new Date(sDate);
            }

            // Get year, month, and day part from the date
            var year = date.toLocaleString("default", { year: "numeric" });
            LoadData(year);
        };

        function exporting(e)
        {
            var workbook = new ExcelJS.Workbook();
            var worksheet = workbook.addWorksheet('KH Thực Hiện Công Việc EHS');

            DevExpress.excelExporter.exportDataGrid({
                component: e.component,
                worksheet: worksheet,
                autoFilterEnabled: true
            }).then(function () {
                workbook.xlsx.writeBuffer().then(function (buffer) {
                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'KeHoach_ẸHS.xlsx');
                });
            });
            e.cancel = true;
        }
    </script>
}
@section Styles{
    <style>
        .inc {
            color: #f00;
        }

        .dec { /* Created with https://www.css-gradient.com */
            background: #2DBA6E;
            background: -webkit-linear-gradient(right, #2DBA6E, #ABEE04);
            background: -moz-linear-gradient(right, #2DBA6E, #ABEE04);
            background: linear-gradient(to left, #2DBA6E, #ABEE04);
            color: #2ab71b;
            /* background-image: linear-gradient(to right, blue, green);*/
            font-weight: bold;
            padding-left: 10px;
        }

        .decTotal {
            color: #2ab71b;
            /* Created with https://www.css-gradient.com */
            /* Created with https://www.css-gradient.com */
            background: #2C8DD8;
            background: -webkit-linear-gradient(right, #2C8DD8, #04C1EE);
            background: -moz-linear-gradient(right, #2C8DD8, #04C1EE);
            background: linear-gradient(to left, #2C8DD8, #04C1EE);
            font-weight: bold;
            padding-left: 10px;
        }
    </style>
}


<div class="content container-fluid">
    <div class="page-header" style="margin-bottom:-1rem">
        <div class="row">
            <div class="col-sm-12">
                <h3 class="page-title">@(localizer["TONGHOPKEHOACH"])</h3>
            </div>
        </div>
    </div>

    <div class="row align-items-center">
        <div class="col">
            <div class="form" style="float:left">
                <div class="dx-fieldset">
                    <div class="dx-field">
                        <div>
                            @(Html.DevExtreme().DateBox()
                                  .ID("txt_year")
                                  .Value(DateTime.Now.Year.ToString())
                                  .CalendarOptions(x=>x.MaxZoomLevel(CalendarZoomLevel.Decade))
                                  .DisplayFormat("yyyy")
                                  .Width(200)
                                  .Placeholder("Select...")
                                  .Label("Year")
                                  .OnValueChanged("selectedDate_changed")
                            )

                        </div>
                    </div>
                </div>
            </div>
            <div class="options" style="margin-top: 20px;">
                <div class="caption">Options</div>
                <div class="option">
                    @(Html.DevExtreme().CheckBox()
            .ID("autoExpand")
            .Text("Expand All Groups")
            .Value(true)
            .OnValueChanged(@<text>
                function(data) {
                    var dataGrid = $("#gridContainer").dxDataGrid("instance");
                    dataGrid.option("grouping.autoExpandAll", data.value);
                }
            </text>)
        )
                </div>
            </div>
        </div>

    </div>

    <div class="row">
        <div class="col-md-12">


            @(Html.DevExtreme().LoadPanel()
        .ID("loadPanel")
        .Position(p => p.Of("#gridContainer"))
        .Visible(false)
)
            @(Html.DevExtreme().DataGrid<TotalAllItemByYear>
    ()
    .ID("gridContainer")
    .Height(700)
    .ShowBorders(true)
      .RepaintChangesOnly(true)
     .LoadPanel(loadPanel => loadPanel.Enabled(false))
    .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
    .Paging(paging => paging.Enabled(false))
    .AllowColumnResizing(true)
    .ColumnMinWidth(50)
    .ColumnAutoWidth(true)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .RowAlternationEnabled(true)
    .FilterRow(filterRow => filterRow
    .Visible(true)
    .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
    .OnExporting("exporting")
    .Columns(columns =>
    {
        columns.AddFor(m => m.STT).AllowEditing(true).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.TenDeMuc).GroupIndex(0).Caption(@localizer["DE_MUC"].Value).Width(150).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.TenNoiDung).Caption(@localizer["NOI_DUNG"].Value).Width(150).Fixed(true).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.NhaThau).Caption(@localizer["NHA_THAU"].Value).Fixed(true).Width(90).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.ChuKy).Caption(@localizer["CHU_KY_THUC_HIEN"].Value).Fixed(true).Width(120).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.NguoiPhuTrach).Caption(@localizer["NGUOI_PHU_TRACH"].Value).Fixed(true).Width(80).FixedPosition(HorizontalEdge.Left);
        columns.AddFor(m => m.Month_1).Width(120).Format("#,##0").Caption("1월").CellTemplate(@<text>
                                    <div class="<%- data.Month_1 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_2).Width(120).Format("#,##0").Caption("2월").CellTemplate(@<text>
                                    <div class="<%- data.Month_2 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_3).Width(120).Format("#,##0").Caption("3월").CellTemplate(@<text>
                                    <div class="<%- data.Month_3 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_4).Width(120).Format("#,##0").Caption("4월").CellTemplate(@<text>
                                    <div class="<%- data.Month_4 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_5).Width(120).Format("#,##0").Caption("5월").CellTemplate(@<text>
                                    <div class="<%- data.Month_5 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_6).Width(120).Format("#,##0").Caption("6월").CellTemplate(@<text>
                                    <div class="<%- data.Month_6 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_7).Width(120).Format("#,##0").Caption("7월").CellTemplate(@<text>
                                    <div class="<%- data.Month_7 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_8).Width(120).Format("#,##0").Caption("8월").CellTemplate(@<text>
                                    <div class="<%- data.Month_8 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_9).Width(120).Format("#,##0").Caption("9월").CellTemplate(@<text>
                                    <div class="<%- data.Month_9 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_10).Width(120).Format("#,##0").Caption("10월").CellTemplate(@<text>
                                    <div class="<%- data.Month_10 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_11).Width(120).Format("#,##0").Caption("11월").CellTemplate(@<text>
                                    <div class="<%- data.Month_11 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.Month_12).Width(120).Format("#,##0").Caption("12월").CellTemplate(@<text>
                                    <div class="<%- data.Month_12 > 0 ? 'dec' : 'inc' %>">
                                        <span class="current-value" style="color:black"><%- text %></span>
                                    </div>
                                </text>);
        columns.AddFor(m => m.ToTal).Width(150).Format("#,##0").Caption("Total").CellTemplate(@<text>
                                    <div class="<%- data.ToTal > 0 ? 'decTotal' : 'inc' %>">
                                        <span class="current-value" style="color:white"><%- text %></span>
                                    </div>
                                </text>);;

    })
     .AllowColumnReordering(true)
    .ShowBorders(true)
    .Grouping(grouping => grouping.AutoExpandAll(true))
    .SearchPanel(searchPanel => searchPanel.Visible(true))
    .GroupPanel(groupPanel => groupPanel.Visible(true))
    .WordWrapEnabled(true).Summary(s=>s.TotalItems(tt => {
        tt.AddFor(m => m.Month_1).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_2).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_3).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_4).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_5).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_6).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_7).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_8).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_9).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_10).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_11).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.Month_12).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
        tt.AddFor(m => m.ToTal).SummaryType(SummaryType.Sum).DisplayFormat("{0}").ValueFormat(Format.FixedPoint);
    }))
    )


        </div>
    </div>
</div>



